=D3*D$2+E3*E$2-(F3*F$2+G3*G$2)

find . -name "*.bam" -exec samtools index {} \;

tar -zxvf filename.tar.gz
tar -jxvf filename.tar.bz2

find . -name "*sum.log" -exec ls -l {} \;
find . -name "*sum.log" -exec grep 'Error' {} \; -print

find . -name "*sum.log.gz" -exec gunzip {} \;
find . -name "*sum.xln.gz" -exec gunzip {} \;
tar -zcvf progeni_logs.tar.gz chr*/*sum.log

find . -name "*sum.log" -exec rm {} \;
find . -name "*sum.xln" -exec rm {} \;
nohup ./sum > 201.out &
nohup ./sum > 202.out &
nohup ./sum > 203.out &
nohup ./sum2 > 204.out &
tar -zcvf maps.tar.gz chr*/*.map
tar -zcvf fams.tar.gz chr*/*.fam


word count:
more plink.bim | wc -l


tar -zcvf cor1_ibds.tar.gz chr*/*sum.xln


find . -name "*" -exec gunzip {} \;


find . -name "*.log" -exec rm {} \;
find . -name "*.host" -exec rm {} \;
find . -name "*.ibds.pre_phase.bgl.ibd.gz" -exec rm {} \;

find . -name "ibds.pre_phase.bgl" -exec ls -l {} \;


find . -name "tmpdir" -exec rm -r {} \;

find . -name "temp.*" -exec rm -r {} \; 
find . -name "*.ibd" -exec ls -l {} \;
find . -name "plug" -exec rm -r {} \; 
find . -name "*.out" -exec grep 'sampled 20000 pairs' {} \; -print
find . -name "*.host" -exec more  {} \; -print
find . -name "*.out" -exec grep 'Exception' {} \; -print


awk "BEGIN { OFS = \"\t\" } {print $1, ($4<0.50?$4:1-$4)}" snplist_described_freq.xln > MAF.xln

// below can be used on the unix command line, windows requires escape characters for quotes as above in OFS=
awk '{print $1"\t"$2"\t"$3"\t"$4"\t"$5"\t"$6}' chr21/all.chr21.ped > plink.fam
awk '{print $1"\t"$2}' plink.fam > keeps.txt
awk '{print $2}' plink.bim > snps.txt
awk '{print $1}' chr21.f1f2.8861.mldose > list2.txt

awk '{ if ($10>0.5) print $1"\t"$2"\t"$3"\t"$4"\t"$7"\t"$8"\t"$9"\t"$10}' plink.genome > smaller.xln



-Xmx1024M
-Xmx1536M
-Xmx2048M
-Xmx4096M
-Xmx15g -d64 


request specific node:
#$ -q *@compute-0-1.local

write.table(as.data.frame(t(unlist(myvar2))), quote=FALSE)


=IF(OR(AND(D2>0.5,E2<0.5),AND(D2<0.5,E2>0.5)),1,0)


jcp gwas.ParseMissingness dir=./
jcp gwas.ParseMissingness dir=./ -test
mkdir analysis
cd analysis
cp ../covars.dat .
plink --bfile ../plink --exclude ../threshold_drops.out --make-bed


=CONCATENATE(A2,"_",B2,"_",C2,"_",D2)

=MID(A1,4,FIND(":",A1)-4)*1
=MID(A1,FIND(":",A1)+1,FIND("-",A1)-FIND(":",A1)-1)*1
=MID(A1,FIND("-",A1)+1,LEN(A1))*1
=IF(AND(C3=C$1,OR(AND(D3>=D$1,D3<=E$1),AND(E3>=D$1,E3<=E$1),AND(D$1>=D3,E$1<=E3))),1,0)

plink --bfile plink --maf 0.25 --indep 50 25 1
--maf 0.01 --geno 0.05

tar cvf - demo/ | gzip > demo.tar.gz

tar -cvf newfile.tar oldfilesdir/
gunzip -c *.tgz | tar xvf -


=LEFT(A2,5)
=RIGHT(A2,LEN(A2)-6)
=B2*1000+C2

=LEFT(D2,1)
=RIGHT(D2,LEN(D2)-1)

I2:
=E2-D2
J2:
=CONCATENATE("chr",C2,":",D2-I2,"-",E2+I2)


=CONCATENATE("chr",C2,":",D2,"-",E2)
=CONCATENATE("chr",A4,":",(D4-50000),"-",(D4+50000))

=IF(B2="A",1,IF(B2="C",2,IF(B2="G",3,IF(B2="T",4,"."))))



help with R help
install.packages() opens up a dialog and you can choose what to install.
install.packages(c("rmeta")) works at the command line
source("C:/test/script.R") runs a script
source("ForestPlot_ForNathan.R")



new BufferedReader(new InputStreamReader(System.in))

char->int
9	tab
10	\n
13	\r
32	space
49	1
48	0
65	A
97	a
45	-
62	>


counting allowing for ties
=IF(H3=H2,I2+1,0)
=IF(I3=0,J2+I2+1,J2)

label best p-value with method
=IF(J2=C2,"ADD",IF(E2=J2,"DOM",IF(J2=G2,"REC",IF(J2=I2,"GENO","DUNNO"))))

IF(A2<>A1,C1+1,C1)
IF(A2<>A1,C2*100+1,D1+1)


A2*1000+B2

LEFT(B2,5)
RIGHT(B2,LEN(B2)-6)


IF(OR(B1>0.7,C1>0.3),FALSE,TRUE)
IF(OR(F1>0.7,G1>0.3),FALSE,TRUE)
IF(D1<>H1,1,0)


find . -name "batch" -exec chmod 777 {} \;
find . -name "err*" -exec grep 'PedCheck has found ' {} \;
find . -name "output-1.prn" -exec vi {} \;
find . -name "err*" -exec ls -l {} \;
find . -name "multipoint.out" -exec grep 'Highest LOD' {} \;
find . -name "*" -exec grep 'Convergence' {} \;

find . -name "*.opt" -exec rm {} \; 
find . -name "allegro.log" -exec rm {} \;
find . -name "linkage-*" -exec rm {} \; 

search and replace for perl/vi
:s/old/new/g - all occurances on the line
:%s/old/new - first occurance on each line
:%s/old/new/g - all occurances

more "*/q1/multipoint.out"

BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));

BufferedReader reader = new BufferedReader(new InputStreamReader(new FileInputStream("turkulu.txt"), "UnicodeLittle"));
PrintWriter writer = new PrintWriter(new OutputStreamWriter(new FileOutputStream(DBFILE), "UnicodeLittle"));


n -s /project/coga/analysis/renewal/final_combined/ coga
ln -s /project/coga/analysis/ pca

du -sk			// size of entire directory tree
du -h			// lists each subdirectory individually
du -h --max-depth=1	// lists each primary subdirectory individually summed


alias ps='/usr/ucb/ps -aux | more'
alias psn='/usr/ucb/ps -aux | grep npankrat'
alias l="ls -l"
alias lsd="ls | grep '/'"
alias df='df -k'
alias kil='kill -KILL'


nohup _____ > file || /dev/null  (no hangup)

total directory size:    du -sk

gunzip something.tar.Z
tar -xvf something.tar 

tar -cvf newfile.tar oldfilesdir/

gunzip -c gen12.tgz | tar xvf -

vi */batch   (  use :w then :n to continue  )


quinks:us: userspace - what you're running above the kernel
sy: system calls - what is running inside the kernel
ni: reniced processes
id: idle
wa: waiting for i/o
hi: hardware interrupts - how much time is spent dealing with hardware
si: software interrupts - how much time is spent dealing with software-created interrupts (system calls, etc.)



byte: The byte data type is an 8-bit signed two's complement integer. It has a minimum value of -128 and a maximum value of 127 (inclusive). The byte data type can be useful for saving memory in large arrays, where the memory savings actually matters. They can also be used in place of int where their limits help to clarify your code; the fact that a variable's range is limited can serve as a form of documentation. 

short: The short data type is a 16-bit signed two's complement integer. It has a minimum value of -32,768 and a maximum value of 32,767 (inclusive). As with byte, the same guidelines apply: you can use a short to save memory in large arrays, in situations where the memory savings actually matters. 

int: The int data type is a 32-bit signed two's complement integer. It has a minimum value of -2,147,483,648 and a maximum value of 2,147,483,647 (inclusive). For integral values, this data type is generally the default choice unless there is a reason (like the above) to choose something else. This data type will most likely be large enough for the numbers your program will use, but if you need a wider range of values, use long instead. 

long: The long data type is a 64-bit signed two's complement integer. It has a minimum value of -9,223,372,036,854,775,808 and a maximum value of 9,223,372,036,854,775,807 (inclusive). Use this data type when you need a range of values wider than those provided by int. 

float: The float data type is a single-precision 32-bit IEEE 754 floating point. Its range of values is beyond the scope of this discussion, but is specified in section 4.2.3 of the Java Language Specification. As with the recommendations for byte and short, use a float (instead of double) if you need to save memory in large arrays of floating point numbers. This data type should never be used for precise values, such as currency. For that, you will need to use the java.math.BigDecimal class instead. Numbers and Strings covers BigDecimal and other useful classes provided by the Java platform. 

double: The double data type is a double-precision 64-bit IEEE 754 floating point. Its range of values is beyond the scope of this discussion, but is specified in section 4.2.3 of the Java Language Specification. For decimal values, this data type is generally the default choice. As mentioned above, this data type should never be used for precise values, such as currency. 

boolean: The boolean data type has only two possible values: true and false. Use this data type for simple flags that track true/false conditions. This data type represents one bit of information, but its "size" isn't something that's precisely defined. 

char: The char data type is a single 16-bit Unicode character. It has a minimum value of '\u0000' (or 0) and a maximum value of '\uffff' (or 65,535 inclusive). 

java.math.BigInteger and java.math.BigDecimal are unbounded but extremely inefficient
