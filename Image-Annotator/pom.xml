<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0
		http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<parent>
		<groupId>org.genvisis</groupId>
		<artifactId>pom-genvisis</artifactId>
		<version>0.0.1-SNAPSHOT</version>
	</parent>

	<artifactId>Image-Annotator</artifactId>
	<version>${image-annotator.version}</version>
	<packaging>jar</packaging>

	<description>Annotator app for SAM images</description>

	<!-- See "debug"/"release" profiles for properties that change -->
	<properties>
		<outname>image-annotator</outname>
		<mainClass>org.genvisis.one.ben.imagetag.ImageAnnotatorJavaFXEntry</mainClass>
		<app.name>image-annotator</app.name>
		<app.mainClass>${mainClass}</app.mainClass>
		<app.version>${image-annotator.version}</app.version>
		<app.dir>${project.build.directory}/app</app.dir>
		<app.installerdir>${project.build.directory}/fxinstaller</app.installerdir>
		<app.acceptDowngrade>true</app.acceptDowngrade>
		<app.parameters></app.parameters>
		<app.vendor>Pankratz Lab, UMN</app.vendor>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
	</properties>

	<dependencies>
		<dependency>
			<groupId>no.tornado</groupId>
			<artifactId>fxlauncher</artifactId>
		</dependency>
		<dependency>
			<groupId>org.genvisis</groupId>
			<artifactId>PLab-common</artifactId>
		</dependency>
		<dependency>
			<groupId>org.genvisis</groupId>
			<artifactId>SEQ</artifactId>
		</dependency>
	</dependencies>

	<profiles>
		<!-- properties for production -->
		<profile>
			<id>release</id>
			<properties>
				<app.filename>image-annotator</app.filename>
				<app.cacheDir>USERLIB/pankratzlab/image-annotator</app.cacheDir>
				<app.url>http://genvisis.org/dist-image-annotator</app.url>
			</properties>
		</profile>
		<!-- properties for production -->
		<profile>
			<id>test</id>
			<properties>
				<app.filename>testing-image-annotator</app.filename>
				<app.cacheDir>USERLIB/pankratzlab/testing-image-annotator</app.cacheDir>
				<app.url>http://genvisis.org/testing-dist-image-annotator</app.url>
			</properties>
		</profile>
		<profile>
			<id>win32</id>
			<activation>
				<property>
					<name>sun.arch.data.model</name>
					<value>32</value>
				</property>
			</activation>
			<properties>
				<installer.name>-installer-win32</installer.name>
			</properties>
		</profile>
		<profile>
			<id>win64</id>
			<activation>
				<property>
					<name>sun.arch.data.model</name>
					<value>64</value>
				</property>
			</activation>
			<properties>
				<installer.name>-installer-win64</installer.name>
			</properties>
		</profile>
		<!-- JFX distribution -->
		<profile>
			<id>jfx-distribution</id>
			<build>
				<plugins>
					<!-- Compile project jar to appdir -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-jar-plugin</artifactId>
						<configuration>
							<outputDirectory>${app.dir}</outputDirectory>
						</configuration>
					</plugin>
					<!-- Copy dependencies to appdir -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-dependency-plugin</artifactId>
						<configuration>
							<excludeScope>provided</excludeScope>
							<outputDirectory>${app.dir}</outputDirectory>
							<stripVersion>true</stripVersion>
						</configuration>
						<executions>
							<execution>
								<phase>install</phase>
								<goals>
									<goal>copy-dependencies</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<!-- Generate app.xml manifest -->
						<executions>
							<execution>
								<id>create-manifest</id>
								<phase>install</phase>
								<goals>
									<goal>java</goal>
								</goals>
								<configuration>
									<mainClass>fxlauncher.CreateManifest</mainClass>
									<arguments>
										<argument>${app.url}</argument>
										<argument>${app.mainClass}</argument>
										<argument>${app.dir}</argument>
										<argument>--accept-downgrade=${app.acceptDowngrade}</argument>
										<argument>--include-extensions=dll,properties</argument>
										<argument>${app.parameters}</argument>
									</arguments>
								</configuration>
							</execution>
							<!-- Embed app.xml inside fxlauncher.xml so we don't need to reference 
								app.xml to start the app -->
							<execution>
								<id>embed-manifest-in-launcher</id>
								<phase>install</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>jar</executable>
									<workingDirectory>${app.dir}</workingDirectory>
									<arguments>
										<argument>uf</argument>
										<argument>fxlauncher.jar</argument>
										<argument>app.xml</argument>
									</arguments>
								</configuration>
							</execution>
							<!-- Optional step to include custom UI, see https://github.com/edvin/fxlauncher-custom-ui -->
							<!--<execution> -->
							<!--<id>embed-custom-ui-in-launcher</id> -->
							<!--<phase>install</phase> -->
							<!--<goals> -->
							<!--<goal>exec</goal> -->
							<!--</goals> -->
							<!--<configuration> -->
							<!--<executable>jar</executable> -->
							<!--<workingDirectory>${app.dir}</workingDirectory> -->
							<!--<arguments> -->
							<!--<argument>uf</argument> -->
							<!--<argument>fxlauncher.jar</argument> -->
							<!--<argument>-C</argument> -->
							<!--<argument>${project.basedir}/../fxlauncher-custom-ui/target/classes</argument> -->
							<!--<argument>.</argument> -->
							<!--</arguments> -->
							<!--</configuration> -->
							<!--</execution> -->
							<!-- TODO this execution should be its own profile -->
							<!-- Copy application artifacts to remote site using scp (optional) -->
							<!-- <execution> <id>deploy-app</id> <goals> <goal>exec</goal> </goals> 
								<configuration> <executable>scp</executable> <arguments> <argument>-r</argument> 
								<argument>${app.dir}/.</argument> <argument>${app.deploy.target}</argument> 
								</arguments> </configuration> </execution> -->
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-compiler-plugin</artifactId>
						<version>3.3</version>
						<configuration>
							<source>1.8</source>
							<target>1.8</target>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- JFX native installer -->
		<profile>
			<id>jfx-installer</id>
			<build>
				<plugins>
					<!-- Compile project jar to appdir -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-jar-plugin</artifactId>
						<configuration>
							<outputDirectory>${app.dir}</outputDirectory>
						</configuration>
					</plugin>
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<executions>
							<!-- Create native installer. Feel free to add more arguments as needed. 
								https://docs.oracle.com/javase/8/docs/technotes/tools/windows/javapackager.html -->
							<execution>
								<id>installer</id>
								<phase>install</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>javapackager</executable>
									<!-- TODO transfer these <configuration> <jfxMainAppJarName>${outname}-jfx.jar</jfxMainAppJarName> 
										<nativeReleaseVersion>${jfxInstallVer}</nativeReleaseVersion> <additionalAppResources>${resourcesDir}</additionalAppResources> 
										</configuration> -->

									<arguments>
										<argument>-deploy</argument>
										<argument>-native</argument>
										<argument>-outdir</argument>
										<argument>${app.installerdir}</argument>
										<argument>-outfile</argument>
										<argument>${app.filename}</argument>
										<argument>-srcdir</argument>
										<argument>${app.dir}</argument>
										<argument>-srcfiles</argument>
										<argument>fxlauncher.jar</argument>
										<argument>-appclass</argument>
										<argument>fxlauncher.Launcher</argument>
										<argument>-name</argument>
										<argument>${app.name}</argument>
										<argument>-title</argument>
										<argument>${app.name}</argument>
										<argument>-vendor</argument>
										<argument>${app.vendor}</argument>
										<argument>-BappVersion=${app.version}</argument>
										<argument>-Bidentifier=${project.groupId}.${project.artifactId}</argument>
										<argument>-BjvmOptions=-Xmx1g</argument>
										<argument>-BjvmOptions=-Xms256m</argument>
										<argument>-BshortcutHint=true</argument>
										<!-- TODO <argument>copyright=(c)2009-2016 Nathan Pankratz, GNU 
											General Public License, v2</argument> <argument>-manifestAttrs</argument> 
											<argument>Implementation-Build=$buildNumber},Implementation-Date=${maven.build.timestamp}Implementation-Version=${project.version},Compile-Time=${timestamp}</argument> 
											<argument>licenseFile=</argument> <argument>-Bicon=</argument> -->
									</arguments>
								</configuration>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-compiler-plugin</artifactId>
						<version>3.3</version>
						<configuration>
							<source>1.8</source>
							<target>1.8</target>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- This profile builds image annotator .jar and optionally distributes it to
				 other locations (local and remote) -->
		<profile>
			<id>makejar</id>
			<activation>
				<property>
					<name>makejar</name>
				</property>
			</activation>
			<properties>
				<assemblyName>ImageAnnotator</assemblyName>
				<mainClass>org.genvisis.one.ben.imagetag.ImageAnnotator</mainClass>
			</properties>
			<build>
				<plugins>
					<!-- Build the assembly uberjar -->
					<plugin>
						<artifactId>maven-assembly-plugin</artifactId>
						<configuration>
							<descriptorRefs>
								<descriptorRef>jar-with-dependencies</descriptorRef>
							</descriptorRefs>
						</configuration>
						<executions>
							<execution>
								<id>make-assembly</id>
								<phase>install</phase>
								<goals>
									<goal>single</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
					<plugin>
						<artifactId>maven-antrun-plugin</artifactId>
						<dependencies>
							<dependency>
								<groupId>ant-contrib</groupId>
								<artifactId>ant-contrib</artifactId>
								<version>1.0b3</version>
								<exclusions>
									<exclusion>
										<groupId>ant</groupId>
										<artifactId>ant</artifactId>
									</exclusion>
								</exclusions>
							</dependency>
							<dependency>
								<groupId>org.apache.ant</groupId>
								<artifactId>ant-nodeps</artifactId>
								<version>1.8.1</version>
							</dependency>
						</dependencies>
						<executions>
							<!-- make the jar executable -->
							<execution>
								<id>chmod-jar</id>
								<phase>install</phase>
								<configuration>
									<target>
										<chmod file="${project.build.directory}/${assemblyName}.jar" perm="ugo+rx"/>
									</target>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>
							<!-- upload the jar to a remote location -->
							<execution>
								<id>upload-annotator</id>
								<phase>install</phase>
								<configuration>
									<target>
										<ac:if xmlns:ac="antlib:net.sf.antcontrib">
											<ac:and>
												<ac:isset property="genv.upload.path"/>
												<ac:isset property="genv.upload.exe"/>
											</ac:and>
											<ac:then>
												<exec dir="${project.basedir}" executable="${genv.upload.exe}" failonerror="true">
													<arg value="${project.build.directory}/${assemblyName}.jar"/>
													<arg value="${genv.upload.path}"/>
												</exec>
											</ac:then>
										</ac:if>
									</target>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>
							<!-- copy the jar to a local location -->
							<execution>
								<id>copy-annotator</id>
								<phase>install</phase>
								<configuration>
									<target>
										<ac:if xmlns:ac="antlib:net.sf.antcontrib">
											<ac:isset property="genv.copy.path"/>
											<ac:then>
												<copy todir="${genv.copy.path}" file="${project.build.directory}/${assemblyName}.jar" />
											</ac:then>
										</ac:if>
									</target>
								</configuration>
								<goals>
									<goal>run</goal>
								</goals>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

</project>
