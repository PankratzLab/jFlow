<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.pankratzlab</groupId>
	<artifactId>pom-jflow</artifactId>
	<version>0.2-SNAPSHOT</version>
	<packaging>pom</packaging>

	<name>Genvisis Projects</name>
	<description>Parent POM for all Genvisis projects.</description>
	<url>http://www.genvisis.org/</url>
	<inceptionYear>2009</inceptionYear>
	<organization>
		<name>Genvisis</name>
		<url>http://www.genvisis.org/</url>
	</organization>
	<scm>
		<connection>scm:git:git://github.com/PankratzLab/jFlow</connection>
		<developerConnection>scm:git:git@github.com:PankratzLab/jFlow</developerConnection>
		<tag>HEAD</tag>
		<url>https://github.com/PankratzLab/jFlow</url>
	</scm>
	<developers>
		<developer>
			<id>npankrat</id>
			<name>Nathan Pankratz</name>
			<url></url>
		</developer>
		<developer>
			<id>jlanej</id>
			<name>John Lane</name>
			<url></url>
		</developer>
		<developer>
			<id>stkelley</id>
			<name>Spencer Kelley</name>
			<url></url>
		</developer>
		<developer>
			<id>hinerm</id>
			<name>Mark Hiner</name>
			<url></url>
		</developer>
		<developer>
			<id>rcoleb</id>
			<name>Ben Cole</name>
			<url></url>
		</developer>
		<developer>
			<id>mstim</id>
			<name>Mary Rachel Stimson</name>
			<url></url>
		</developer>
	</developers>

	<!-- Genvisis is structured as a multi-module maven project. By defining 
		the bulk of configuration in this parent pom.xml, each individual component 
		is simplified and consistent. -->
	<modules>
		<module>CFCS</module>
		<module>Logicle</module>
		<module>PLab-public</module>
		<module>Genv-flow</module>
	</modules>

	<repositories>
		<repository>
			<id>central</id>
			<url>https://repo1.maven.org/maven2</url>
		</repository>
		<repository>
			<id>algs4</id>
			<url>https://dl.bintray.com/algs4/maven/</url>
		</repository>
		<repository>
			<id>github-jflow</id>
			<url>https://maven.pkg.github.com/PankratzLab/jFlow</url>
		</repository>
	</repositories>

	<distributionManagement>
		<repository>
			<id>github-jflow</id>
			<url>https://maven.pkg.github.com/PankratzLab/jFlow</url>
		</repository>
	</distributionManagement>

	<prerequisites>
		<maven>${genvisis.mvn.version}</maven>
	</prerequisites>

	<issueManagement>
		<system>GitHub Issues</system>
		<url>https://github.com/PankratzLab/jFlow/issues</url>
	</issueManagement>

	<ciManagement>
		<system>Jenkins</system>
		<url>https://it.genvisis.org/jenkins</url>
	</ciManagement>

	<properties>
		<!-- By defining version properties here, each component receives the same 
			version of any given dependency -->

		<!-- Genvisis versions - NB: change these to non-SNAPSHOT when releasing -->
		<plab-public.version>0.0.2-SNAPSHOT</plab-public.version>
		<genv-flow.version>0.0.2-SNAPSHOT</genv-flow.version>

		<!-- CFCS -->
		<cfcs.version>0.0.1</cfcs.version>

		<!-- Logicle -->
		<logicle.version>0.0.1</logicle.version>

		<!-- JUnit - http://junit.org/ -->
		<junit.version>4.11</junit.version>

		<!-- BZip2 -->
		<bzip2.version>0.9.1</bzip2.version>

		<!-- ControlsFX -->
		<controlsfx.version>8.40.12</controlsfx.version>

		<!-- POI -->
		<poi.version>3.16</poi.version>

		<!-- POI-ooxml -->
		<poi-ooxml.version>3.16</poi-ooxml.version>

		<!-- POI-schemas -->
		<poi-ooxml-schemas.version>3.16</poi-ooxml-schemas.version>

		<!-- XMLBeans -->
		<xmlbeans.version>2.6.0</xmlbeans.version>

		<!-- Guava -->
		<guava.version>24.0-jre</guava.version>

		<!-- Commons-cli -->
		<commons-cli.version>1.4</commons-cli.version>

		<!-- Commons-Compress -->
		<commons-compress.version>1.13</commons-compress.version>

		<!-- Commons-collections -->
		<commons-collections.version>4.1</commons-collections.version>

		<!-- Commons-io -->
		<commons-io.version>2.5</commons-io.version>

		<!-- Commons-codec -->
		<commons-codec.version>1.11</commons-codec.version>

		<!-- Commons-jexl -->
		<commons-jexl.version>2.1.1</commons-jexl.version>

		<!-- Commons-logging -->
		<commons-logging.version>1.1.1</commons-logging.version>

		<!-- Commons-math -->
		<commons-math.version>3.6.1</commons-math.version>

		<!-- FXLauncher -->
		<fxlauncher.version>1.0.20</fxlauncher.version>

		<!-- Snappy-java -->
		<snappy-java.version>1.1.2.6</snappy-java.version>

		<!-- Java-SemVer -->
		<java-semver.version>0.9.0</java-semver.version>

		<!-- MigLayout - http://www.miglayout.com/ -->
		<miglayout.version>5.0</miglayout.version>

		<!-- EJML -->
		<ejml.version>0.30</ejml.version>

		<!-- SnpEff -->
		<snpeff.version>4.3</snpeff.version>

		<!-- Jahmm -->
		<jahmm.version>0.6.1</jahmm.version>

		<!-- HTSJDK -->
		<htsjdk.version>2.20.1</htsjdk.version>

		<!-- ALGS4 -->
		<algs4.version>1.0.4</algs4.version>

		<!-- Additional configuration -->

		<!-- NB: Avoid platform encoding warning when copying resources. -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>

		<!-- Each product can define its own main class -->
		<mainClass>org.genvisis.cnv.Launch</mainClass>

		<!-- NB: Specify formatting of the maven.build.timestamp property. -->
		<maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ssZ</maven.build.timestamp.format>

		<!-- Controls the Java and Maven compliance versions -->
		<maven.compiler.source>1.8</maven.compiler.source>
		<maven.compiler.target>1.8</maven.compiler.target>
		<maven.compiler.compilerId>javac</maven.compiler.compilerId>
		<genvisis.mvn.version>3.0.4</genvisis.mvn.version>
		<jsr305.version>3.0.2</jsr305.version>
	</properties>

	<!-- Dependencies should only be declared with versions in this parent pom. 
		In sub-modules, the versions can be omitted (they are automatically inherited) -->
	<dependencyManagement>
		<dependencies>

			<!-- Genvisis -->
			<dependency>
				<groupId>org.pankratzlab</groupId>
				<artifactId>PLab-public</artifactId>
				<version>${plab-public.version}</version>
			</dependency>


			<dependency>
				<groupId>org.genvisis.fcs</groupId>
				<artifactId>Genv-flow</artifactId>
				<version>${genv-flow.version}</version>
			</dependency>


			<!-- CFCS -->
			<dependency>
				<groupId>org.flowcyt</groupId>
				<artifactId>CFCS</artifactId>
				<version>${cfcs.version}</version>
			</dependency>

			<!-- Logicle -->
			<dependency>
				<groupId>edu.stanford.facs</groupId>
				<artifactId>Logicle</artifactId>
				<version>${logicle.version}</version>
			</dependency>

			<!-- SnpEff -->
			<dependency>
				<groupId>pcingola</groupId>
				<artifactId>SnpEff</artifactId>
				<version>${snpeff.version}</version>
			</dependency>

			<!-- MigLayout - http://www.miglayout.com/ -->
			<dependency>
				<groupId>com.miglayout</groupId>
				<artifactId>miglayout-swing</artifactId>
				<version>${miglayout.version}</version>
			</dependency>

			<!-- Efficient Java -->
			<dependency>
				<groupId>org.ejml</groupId>
				<artifactId>all</artifactId>
				<version>${ejml.version}</version>
			</dependency>

			<!-- Jahmm -->
			<dependency>
				<groupId>be.ac.ulg.montefiore.run</groupId>
				<artifactId>jahmm</artifactId>
				<version>${jahmm.version}</version>
			</dependency>

			<!-- HTSJDK -->
			<dependency>
				<groupId>com.github.samtools</groupId>
				<artifactId>htsjdk</artifactId>
				<version>${htsjdk.version}</version>
			</dependency>

			<!-- BZip2 -->
			<dependency>
				<groupId>org.itadaki</groupId>
				<artifactId>bzip2</artifactId>
				<version>${bzip2.version}</version>
			</dependency>

			<!-- ControlsFX -->
			<dependency>
				<groupId>org.controlsfx</groupId>
				<artifactId>controlsfx</artifactId>
				<version>${controlsfx.version}</version>
			</dependency>

			<!-- XMLBeans -->
			<dependency>
				<groupId>org.apache.xmlbeans</groupId>
				<artifactId>xmlbeans</artifactId>
				<version>${xmlbeans.version}</version>
			</dependency>

			<!-- POI -->
			<dependency>
				<groupId>org.apache.poi</groupId>
				<artifactId>poi</artifactId>
				<version>${poi.version}</version>
			</dependency>

			<!-- POI-ooxml -->
			<dependency>
				<groupId>org.apache.poi</groupId>
				<artifactId>poi-ooxml</artifactId>
				<version>${poi-ooxml.version}</version>
			</dependency>

			<!-- POI-ooxml-schemas -->
			<dependency>
				<groupId>org.apache.poi</groupId>
				<artifactId>poi-ooxml-schemas</artifactId>
				<version>${poi-ooxml-schemas.version}</version>
			</dependency>

			<dependency>
				<groupId>com.google.guava</groupId>
				<artifactId>guava</artifactId>
				<version>${guava.version}</version>
			</dependency>

			<dependency>
				<groupId>com.google.code.findbugs</groupId>
				<artifactId>jsr305</artifactId>
				<version>${jsr305.version}</version>
			</dependency>

			<!-- Commons-compress -->
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-compress</artifactId>
				<version>${commons-compress.version}</version>
			</dependency>

			<!-- Commons-jexl -->
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-jexl</artifactId>
				<version>${commons-jexl.version}</version>
			</dependency>

			<!-- Commons-collections -->
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-collections4</artifactId>
				<version>${commons-collections.version}</version>
			</dependency>

			<!-- Commons-cli -->
			<dependency>
				<groupId>commons-cli</groupId>
				<artifactId>commons-cli</artifactId>
				<version>${commons-cli.version}</version>
			</dependency>

			<!-- Commons-io -->
			<dependency>
				<groupId>commons-io</groupId>
				<artifactId>commons-io</artifactId>
				<version>${commons-io.version}</version>
			</dependency>

			<!-- Commons-logging -->
			<dependency>
				<groupId>commons-logging</groupId>
				<artifactId>commons-logging</artifactId>
				<version>${commons-logging.version}</version>
			</dependency>

			<!-- Commons-math -->
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-math3</artifactId>
				<version>${commons-math.version}</version>
			</dependency>

			<!-- Commons-codec -->
			<dependency>
				<groupId>commons-codec</groupId>
				<artifactId>commons-codec</artifactId>
				<version>${comons-codec.version}</version>
			</dependency>

			<dependency>
				<groupId>edu.princeton.cs</groupId>
				<artifactId>algs4</artifactId>
				<version>${algs4.version}</version>
			</dependency>

			<!-- FXlauncher -->
			<dependency>
				<groupId>no.tornado</groupId>
				<artifactId>fxlauncher</artifactId>
				<version>${fxlauncher.version}</version>
			</dependency>

			<!-- Snappy-Java -->
			<dependency>
				<groupId>org.xerial.snappy</groupId>
				<artifactId>snappy-java</artifactId>
				<version>${snappy-java.version}</version>
			</dependency>

			<!-- Java-SemVer -->
			<dependency>
				<groupId>com.github.zafarkhaja</groupId>
				<artifactId>java-semver</artifactId>
				<version>${java-semver.version}</version>
			</dependency>

			<!-- Test scope dependencies - not included in .jars built with Maven -->

			<!-- JUnit - http://junit.org/ -->
			<dependency>
				<groupId>junit</groupId>
				<artifactId>junit</artifactId>
				<version>${junit.version}</version>
				<scope>test</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<build>
		<!-- Make "mvn" with no arguments do something reasonable (compile, test, 
			package to jar, install to local repository). -->
		<defaultGoal>install</defaultGoal>

		<!-- The pluginManagement block controls plugin configuration in all modules -->
		<pluginManagement>
			<plugins>
				<plugin>
					<artifactId>maven-antrun-plugin</artifactId>
					<version>1.8</version>
				</plugin>

				<plugin>
					<artifactId>maven-clean-plugin</artifactId>
					<version>2.5</version>
				</plugin>

				<plugin>
					<artifactId>maven-dependency-plugin</artifactId>
					<version>2.8</version>
				</plugin>

				<plugin>
					<artifactId>maven-deploy-plugin</artifactId>
					<version>2.8.1</version>
				</plugin>

				<plugin>
					<artifactId>maven-install-plugin</artifactId>
					<version>2.5.1</version>
				</plugin>


				<!-- Default configuration to build an uber-jar. Just call the make-assembly 
					goal:single execution and set params: * assemblyName * mainClass -->
				<plugin>
					<artifactId>maven-assembly-plugin</artifactId>
					<version>2.4</version>
					<configuration>
						<finalName>${assemblyName}</finalName>
						<appendAssemblyId>false</appendAssemblyId>
						<archive>
							<manifest>
								<addClasspath>true</addClasspath>
								<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
								<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
								<mainClass>${mainClass}</mainClass>
							</manifest>
							<manifestEntries>
								<!-- Add SCM revision from buildnumber plugin, if available. -->
								<Implementation-Build>${buildNumber}</Implementation-Build>
								<!-- Add a formatted timestamp for the build. -->
								<Implementation-Date>${maven.build.timestamp}</Implementation-Date>
								<Implementation-Version>${project.version}</Implementation-Version>
								<Compile-Time>${timestamp}</Compile-Time>
								<Build-Type>Development</Build-Type>
								<Copyright>(c)2009-2019 Nathan Pankratz, GNU General Public License, v2</Copyright>
							</manifestEntries>
						</archive>
					</configuration>
				</plugin>

				<!-- Build native app with JavaFX. Reuses configuration from assembly-plugin 
					to provide consistency between the two. -->
				<plugin>
					<groupId>com.zenjava</groupId>
					<artifactId>javafx-maven-plugin</artifactId>
					<version>8.6.0</version>
					<configuration>
						<mainClass>${mainClass}</mainClass>
						<jfxMainAppJarName>${assemblyName}-jfx.jar</jfxMainAppJarName>
						<appName>${assemblyName}</appName>
						<additionalAppResources>${resourcesDir}</additionalAppResources>
						<needShortcut>true</needShortcut>
						<needMenu>true</needMenu>
						<nativeReleaseVersion>0.0.1</nativeReleaseVersion>
						<!-- By using the existing jar, we can reuse the manifest configuration -->
						<updateExistingJar>true</updateExistingJar>
					</configuration>
					<executions>
						<execution>
							<id>create-jfxjar</id>
							<phase>package</phase>
							<goals>
								<goal>build-jar</goal>
							</goals>
						</execution>
						<execution>
							<id>create-native</id>
							<phase>package</phase>
							<goals>
								<goal>build-native</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<artifactId>maven-jar-plugin</artifactId>
					<version>2.5</version>
					<!-- Always add classpath to JAR manifests. -->
					<configuration>
						<archive>
							<manifest>
								<addClasspath>true</addClasspath>
								<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
								<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
								<mainClass>${mainClass}</mainClass>
							</manifest>
							<manifestEntries>
								<Implementation-Build>${buildNumber}</Implementation-Build>
								<Implementation-Date>${maven.build.timestamp}</Implementation-Date>
								<Implementation-Version>${project.version}</Implementation-Version>
								<Compile-Time>${timestamp}</Compile-Time>
								<Build-Type>Development</Build-Type>
								<Copyright>(c)2009-2019 Nathan Pankratz, GNU General Public License, v2</Copyright>
							</manifestEntries>
						</archive>
						<skipIfEmpty>true</skipIfEmpty>
					</configuration>
					<executions>
						<execution>
							<goals>
								<goal>test-jar</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<!-- End of build configuration plugins -->

				<plugin>
					<artifactId>maven-plugin-plugin</artifactId>
					<version>3.3</version>
				</plugin>

				<plugin>
					<artifactId>maven-release-plugin</artifactId>
					<version>2.5</version>
				</plugin>

				<plugin>
					<artifactId>maven-resources-plugin</artifactId>
					<version>2.6</version>
				</plugin>

				<plugin>
					<artifactId>maven-site-plugin</artifactId>
					<version>3.4</version>
				</plugin>

				<plugin>
					<artifactId>maven-source-plugin</artifactId>
					<version>2.3</version>
					<!-- Build source artifact in addition to main artifact. -->
					<executions>
						<execution>
							<goals>
								<goal>jar-no-fork</goal>
							</goals>
						</execution>
					</executions>
				</plugin>

				<plugin>
					<artifactId>maven-surefire-plugin</artifactId>
					<version>2.21.0</version>
				</plugin>

				<!-- Build Number Maven plugin - http://www.mojohaus.org/buildnumber-maven-plugin/ 
					This plugin embeds a build number in the JAR manifest. -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>buildnumber-maven-plugin</artifactId>
					<version>1.3</version>
					<!-- Record SCM revision in manifest. -->
					<executions>
						<execution>
							<phase>validate</phase>
							<goals>
								<goal>create</goal>
							</goals>
						</execution>
					</executions>
					<configuration>
						<getRevisionOnlyOnce>true</getRevisionOnlyOnce>
						<revisionOnScmFailure>UNKNOWN</revisionOnScmFailure>
					</configuration>
				</plugin>

				<!-- Exec Maven plugin - http://www.mojohaus.org/exec-maven-plugin/ This 
					plugin launches a Java class using Maven. -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>exec-maven-plugin</artifactId>
					<version>1.3.1</version>
				</plugin>

				<!-- License Maven plugin - http://www.mojohaus.org/license-maven-plugin/ 
					This plugin manages project licenses and source file headers. -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>license-maven-plugin</artifactId>
					<version>1.19</version>
					<configuration>
						<projectName>${project.description}</projectName>
						<addJavaLicenseAfterPackage>false</addJavaLicenseAfterPackage>
						<canUpdateDescription>true</canUpdateDescription>
						<canUpdateCopyright>true</canUpdateCopyright>
						<extraExtensions>
							<bsh>java</bsh>
							<config>properties</config>
							<ijm>java</ijm>
						</extraExtensions>
					</configuration>
				</plugin>

				<!-- Versions Maven plugin - http://www.mojohaus.org/versions-maven-plugin/ 
					Check for new plugin versions using "mvn versions:display-plugin-updates" -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>versions-maven-plugin</artifactId>
					<version>2.1</version>
				</plugin>

			</plugins>
		</pluginManagement>

		<plugins>

			<!-- Default license information -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<configuration>
					<licenseName>gpl_v2</licenseName>
					<projectName>Genvisis</projectName>
					<organizationName>Nathan Pankratz</organizationName>
				</configuration>
			</plugin>

			<!-- Create -sources.jar when building. -->
			<plugin>
				<artifactId>maven-source-plugin</artifactId>
			</plugin>

			<plugin>
				<artifactId>maven-surefire-plugin</artifactId>
			</plugin>

			<!-- Generate a package-friendly version property. -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>build-helper-maven-plugin</artifactId>
				<version>1.12</version>
			</plugin>

			<!-- Add Implementation-Build entry to JAR manifest. -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>buildnumber-maven-plugin</artifactId>
				<version>1.4</version>
			</plugin>
		</plugins>
		<!-- We use wagon-webdav-jackrabbit 1.0 for deploys, since it is compatible 
			with both Maven 2.2.x and Maven 3.0.x cross-platform. -->
		<extensions>
			<extension>
				<groupId>org.apache.maven.wagon</groupId>
				<artifactId>wagon-webdav-jackrabbit</artifactId>
				<version>1.0</version>
			</extension>
		</extensions>
	</build>
</project>
